function model = train_svm(model, data, psix)
 
  global settings;
  switch model.svm.solver
    case {'sgd', 'sdca'}
      lambda = 1 / (model.svm.C * length(data.imageClasses)) ;
      w = [] ;
      %for ci = 1:length(labels)
      parfor ci = 1:length(data.imageClasses)
        y = 2 * (data.imageClassIds == ci) - 1 ;
        [w(:,ci) b(ci) info] = ...
           vl_svmtrain(psix(:, data.imageClassIds), ...
                       y, ...
                       lambda, ...
                       'Solver', model.svm.solver, ...
                       'MaxNumIterations', 50/lambda, ...
                       'BiasMultiplier', model.svm.biasMultiplier, ...
                       'Epsilon', 1e-3);
      end
    case 'liblinear'
      svm = train(data.imageClassIds', ...
                  sparse(double(psix)),  ...
                  sprintf(' -s 3 -B %f -c %f', ...
                  model.svm.biasMultiplier, model.svm.C), ...
                  'col') ;
      w = svm.w(:,1:end-1)' ;
      b = svm.w(:,end)' ;
  end
  model.b = model.svm.biasMultiplier * b;
  model.w = w;
  save(settings.file.model, 'model') ;
  disp('SVM trained and model has been created');
end